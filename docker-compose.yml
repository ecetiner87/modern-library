version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: modern-library-db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-modern_library}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-modern_library}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API
  backend:
    build: 
      context: .
      dockerfile: Dockerfile.backend
      args:
        NODE_ENV: production
    container_name: modern-library-api
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_CLIENT: postgresql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-modern_library}
      DB_USER: ${DB_USER:-postgres}  
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      PORT: 3001
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "3001:3001"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - library-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 10 &&
        echo 'Running database migrations...' &&
        npm run migrate &&
        echo 'Seeding initial data...' &&
        npm run seed &&
        echo 'Starting application...' &&
        npm start
      "

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001/api}
    container_name: modern-library-frontend
    depends_on:
      backend:
        condition: service_healthy
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001/api}
    ports:
      - "3000:3000"
    networks:
      - library-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis Cache (Optional - for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: modern-library-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - library-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    command: redis-server --appendonly yes --maxmemory 100mb --maxmemory-policy allkeys-lru

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    container_name: modern-library-backup
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGUSER: ${DB_USER:-postgres}
      PGPASSWORD: ${DB_PASSWORD:-postgres}
      PGDATABASE: ${DB_NAME:-modern_library}
      PGHOST: postgres
      PGPORT: 5432
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - library-network
    restart: unless-stopped
    # Run backup daily at 2 AM
    command: >
      sh -c "
        while true; do
          sleep 86400
          echo 'Running daily backup...'
          pg_dump -h postgres -U ${DB_USER:-postgres} ${DB_NAME:-modern_library} > /backups/backup_$(date +%Y%m%d_%H%M%S).sql
          find /backups -name '*.sql' -mtime +30 -delete
        done
      "

networks:
  library-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local 
